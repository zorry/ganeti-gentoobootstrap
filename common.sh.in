#

# Copyright (C) 2007, 2008, 2009, 2012 Google Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

AWK="gawk"
DUMP="/usr/sbin/dump"
LOSETUP="/sbin/losetup"
KPARTX="/sbin/kpartx -s"
PARTED="/usr/sbin/parted"
MKDIR_P="/bin/mkdir -p"
INSTANCE_MEM=
CLEANUP=( )

log_error() {
  echo "$@" >&2
}

get_api5_arguments() {
  GETOPT_RESULT=$*
  # Note the quotes around `$TEMP': they are essential!
  eval set -- "$GETOPT_RESULT"
  while true; do
    case "$1" in
      -i|-n) instance=$2; shift 2;;

      -o) old_name=$2; shift 2;;

      -b) blockdev=$2; shift 2;;

      -s) swapdev=$2; shift 2;;

      --) shift; break;;

      *)  log_error "Internal error!" >&2; exit 1;;
    esac
  done
  if [ -z "$instance" -o -z "$blockdev" ]; then
    log_error "Missing OS API Argument (-i, -n, or -b)"
    exit 1
  fi
  if [ "$SCRIPT_NAME" != "export" -a -z "$swapdev"  ]; then
    log_error "Missing OS API Argument -s (swapdev)"
    exit 1
  fi
  if [ "$SCRIPT_NAME" = "rename" -a -z "$old_name"  ]; then
    log_error "Missing OS API Argument -o (old_name)"
    exit 1
  fi
}

get_api10_arguments() {
  if [ -z "$INSTANCE_NAME" -o -z "$HYPERVISOR" -o -z "$DISK_COUNT" ]; then
    log_error "Missing OS API Variable:"
    log_error "(INSTANCE_NAME HYPERVISOR or DISK_COUNT)"
    exit 1
  fi
  instance=$INSTANCE_NAME
  if [ $DISK_COUNT -lt 1 -o -z "$DISK_0_PATH" ]; then
    log_error "At least one disk is needed"
    exit 1
  fi
  if [ "$SCRIPT_NAME" = "export" ]; then
    if [ -z "$EXPORT_DEVICE" ]; then
      log_error "Missing OS API Variable EXPORT_DEVICE"
    fi
    blockdev=$EXPORT_DEVICE
  elif [ "$SCRIPT_NAME" = "import" ]; then
    if [ -z "$IMPORT_DEVICE" ]; then
       log_error "Missing OS API Variable IMPORT_DEVICE"
    fi
    blockdev=$IMPORT_DEVICE
  else
    blockdev=$DISK_0_PATH
  fi
  if [ "$SCRIPT_NAME" = "rename" -a -z "$OLD_INSTANCE_NAME" ]; then
    log_error "Missing OS API Variable OLD_INSTANCE_NAME"
  fi
  old_name=$OLD_INSTANCE_NAME
}

get_os_type() {
  target=$1
  if [ -z "${target}" ] ; then
    log_error "target is not set in get_os_type"
    exit 1
  fi
  if [ -e ${target}/etc/gentoo-release ] ; then
    OS_TYPE="gentoo"
  fi
}

get_os() {
  target=$1
  if [ -z "${target}" ] ; then
    log_error "target is not set in get_os"
    exit 1
  fi
  lsb="/usr/bin/lsb_release"
  if [ -e ${target}/etc/gentoo-release ] ; then
    OPERATING_SYSTEM="gentoo"
  fi
}

format_disk0() {
  local parted_cmd="${PARTED} $1 --script --"
  # Create three partitions:
  # 1 - $BOOT_SIZE /boot, bootable
  # 2 - Size of Memory, swap
  # 3 - Rest
  $parted_cmd mklabel msdos
  $parted_cmd mkpart primary 0% ${BOOT_SIZE}M
  $parted_cmd mkpart primary ${BOOT_SIZE}M $((${BOOT_SIZE}+${SWAP_SIZE}))M
  $parted_cmd mkpart primary $((${BOOT_SIZE}+${SWAP_SIZE}))M 100%
  $parted_cmd set 1 boot on
}

mkfs_disk0() {
  local mkfs="mkfs.${FILESYSTEM}"
  local mkfs_opts=
  if [ "${FILESYSTEM}" = "xfs" ] ; then
    mkfs_opts="-fq"
  else
    mkfs_opts="-Fq"
  fi
  # Format /
  $mkfs $mkfs_opts -L / $root_dev > /dev/null
  # Format /boot
  if [ -n "${boot_dev}" ] ; then
    $mkfs $mkfs_opts -L /boot $boot_dev > /dev/null
  fi
  # Format swap
  if [ -n "${swap_dev}" ] ; then
    # Format swap
    mkswap -f $swap_dev > /dev/null
  fi
  # During reinstalls, ext4 needs a little time after a mkfs so add it here
  # and also run a sync to be sure.
  sync
  sleep 3
}

mount_disk0() {
  local target=$1
  mount $root_dev $target
  CLEANUP+=("umount $target")
  if [ -n "${boot_dev}" ] ; then
    $MKDIR_P $target/boot
    mount $boot_dev $target/boot
    CLEANUP+=("umount $target/boot")
  fi
  # sync the file systems before unmounting to ensure everything is flushed
  # out
  CLEANUP+=("sleep 5")
  CLEANUP+=("sync")
}

map_disk0() {
  blockdev="$1"
  filesystem_dev_base=`$KPARTX -l $blockdev | \
                       grep -m 1 -- "p1.*$blockdev" | \
                       awk '{print $1}'`
  if [ -z "$filesystem_dev_base" ]; then
    log_error "Cannot interpret kpartx output and get partition mapping"
    exit 1
  fi
  $KPARTX -a $blockdev > /dev/null
  filesystem_dev="/dev/mapper/${filesystem_dev_base/%p1/}"
  if [ ! -b "/dev/mapper/$filesystem_dev_base" ]; then
    log_error "Can't find kpartx mapped partition: $filesystem_dev"
    exit 1
  fi
  echo "$filesystem_dev"
}

map_partition() {
  filesystem_dev="$1"
  partition="$2"
  boot_dev="${filesystem_dev}p1"
  swap_dev="${filesystem_dev}p2"
  root_dev="${filesystem_dev}p3"
  echo "$(eval "echo \${$(echo ${partition}_dev)"})"
}

unmap_disk0() {
  kpartx -d $1
}

setup_fstab() {
  local target=$1 fs=${FILESYSTEM}
  get_os_type $target
  cat > $target/etc/fstab <<EOF
# /etc/fstab: static file system information.
#
# <file system>   <mount point>   <type>  <options>       <dump>  <pass>
UUID=$root_uuid   /               $fs     defaults        0       1
proc              /proc           proc    defaults        0       0
EOF

cat >> $target/etc/fstab <<EOF
UUID=$boot_uuid   /boot           $fs     defaults        1       2
EOF

cat >> $target/etc/fstab <<EOF
UUID=$swap_uuid   swap            swap    defaults        0       0
EOF

cat >> $target/etc/fstab <<EOF
shm               /dev/shm         tmpfs   nodev,nosuid,noexec 0   0
tmpfs             /tmp             tmpfs   nodev,nosuid,noexec,size=300M 0   0
tmpfs             /var/tmp/portage tmpfs   size=1000M 0   0
EOF
}

setup_console() {
  local target=$1
  if [ -z "$target" ] ; then
    log_error "target not set for setup_console"
    exit 1
  fi
  sed -i -e 's/.*ttyS0.*/s0:12345:respawn:\/sbin\/agetty 115200 ttyS0 vt100/' \
    ${target}/etc/inittab
}

cleanup() {
  if [ ${#CLEANUP[*]} -gt 0 ]; then
    LAST_ELEMENT=$((${#CLEANUP[*]}-1))
    REVERSE_INDEXES=$(seq ${LAST_ELEMENT} -1 0)
    for i in $REVERSE_INDEXES; do
      ${CLEANUP[$i]}
    done
  fi
}

trap cleanup EXIT

DEFAULT_FILE="@sysconfdir@/ganeti-instance-gentoobootstrap"
if [ -f "$DEFAULT_FILE" ]; then
    . "$DEFAULT_FILE"
fi

# note: we don't set a default mirror since debian and ubuntu have
# different defaults, and it's better to use the default

# only if the user want to specify a mirror in the defaults file we
# will use it, this declaration is to make sure the variable is set
: ${SWAP:="yes"}
: ${SWAP_SIZE:="${INSTANCE_MEM}"}
: ${BOOT_SIZE:="100"}
: ${FILESYSTEM:="ext4"}
: ${KERNEL_ARGS=""}
: ${OVERLAY=""}
: ${CUSTOMIZE_DIR:="@sysconfdir@/ganeti/instance-gentoobootstrap/hooks"}
: ${VARIANTS_DIR:="@sysconfdir@/ganeti/instance-gentoobootstrap/variants"}
: ${CATALYST_SPEC:="@sysconfdir@/ganeti/instance-gentoobootstrap/catalyst/default.spec"}
: ${STAGE4_FILE:="/var/tmp/catalyst/builds/default/stage4-arch-date.tar.bz2"}
: ${NETWORKS_DIR:="/etc/ganeti/instance-gentoobootstrap/networks"}
: ${OVERLAYS_DIR:="/etc/ganeti/instance-gentoobootstrap/overlays"}
: ${EXPORT_DIR:="/tmp"}
: ${IMAGE_DIR:="/var/lib/cache/ganeti-instance-gentoobootstrap"}
: ${IMAGE_DEBUG:="no"}
: ${FDISK:="parted"}

SCRIPT_NAME=$(basename $0)
KERNEL_PATH="$INSTANCE_HV_kernel_path"

if [ -f /sbin/blkid -a -x /sbin/blkid ]; then
  VOL_ID="/sbin/blkid -o value -s UUID"
  VOL_TYPE="/sbin/blkid -o value -s TYPE"
else
  for dir in /lib/udev /sbin; do
    if [ -f $dir/vol_id -a -x $dir/vol_id ]; then
      VOL_ID="$dir/vol_id -u"
      VOL_TYPE="$dir/vol_id -t"
    fi
  done
fi

if [ -z "$VOL_ID" ]; then
  log_error "vol_id or blkid not found, please install udev or util-linux"
  exit 1
fi

if [ -z "$OS_API_VERSION" -o "$OS_API_VERSION" = "5" ]; then
  OS_API_VERSION=5
  GETOPT_RESULT=`getopt -o o:n:i:b:s: -n '$0' -- "$@"`
  if [ $? != 0 ] ; then log_error "Terminating..."; exit 1 ; fi
  get_api5_arguments $GETOPT_RESULT
elif [ "$OS_API_VERSION" = "10" -o "$OS_API_VERSION" = "15" -o \
       "$OS_API_VERSION" = "20" ]; then
  get_api10_arguments
else
  log_error "Unknown OS API VERSION $OS_API_VERSION"
  exit 1
fi

if [ -n "$OS_VARIANT" ]; then
  if [ ! -d "$VARIANTS_DIR" ]; then
    log_error "OS Variants directory $VARIANTS_DIR doesn't exist"
    exit 1
  fi
  VARIANT_CONFIG="$VARIANTS_DIR/$OS_VARIANT.conf"
  if [ -f "$VARIANT_CONFIG" ]; then
    . "$VARIANT_CONFIG"
  else
    if grep -qxF "$OS_VARIANT" variants.list; then
      log_error "ERROR: instance-debootstrap configuration error"
      log_error "  Published variant $OS_VARIANT is missing its config file"
      log_error "  Please create $VARIANT_CONFIG or unpublish the variant"
      log_error "  (by removing $OS_VARIANT from variants.list)"
    else
      log_error "Unofficial variant $OS_VARIANT is unsupported"
      log_error "Most probably this is a user error, forcing a wrong name"
      log_error "To support this variant please create file $VARIANT_CONFIG"
    fi
    exit 1
  fi
fi
